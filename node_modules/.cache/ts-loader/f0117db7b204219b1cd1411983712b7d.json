{"remainingRequest":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\settings\\Settings.ts","dependencies":[{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\settings\\Settings.ts","mtime":1655074190844},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655271851080},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js","mtime":1655271854201},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js","mtime":1655271854628},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js","mtime":1655271851823}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkM6L1VzZXJzL0xlZS9Eb2N1bWVudHMvR2l0SHViL2luY3JlbWVudGFsLWhlbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6L1VzZXJzL0xlZS9Eb2N1bWVudHMvR2l0SHViL2luY3JlbWVudGFsLWhlbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOi9Vc2Vycy9MZWUvRG9jdW1lbnRzL0dpdEh1Yi9pbmNyZW1lbnRhbC1oZWxsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiQzovVXNlcnMvTGVlL0RvY3VtZW50cy9HaXRIdWIvaW5jcmVtZW50YWwtaGVsbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIkM6L1VzZXJzL0xlZS9Eb2N1bWVudHMvR2l0SHViL2luY3JlbWVudGFsLWhlbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0IHsgRmVhdHVyZSB9IGZyb20gIkAvZW5naW5lL2ZlYXR1cmVzL0ZlYXR1cmUiOwppbXBvcnQgeyBTZXR0aW5nSWQgfSBmcm9tICJAL2VuZ2luZS9mZWF0dXJlcy9zZXR0aW5ncy9TZXR0aW5nSWQiOwppbXBvcnQgeyBGdW5jdGlvbkZpZWxkIH0gZnJvbSAiQC9lbmdpbmUvZGV2ZWxvcGVyLXBhbmVsL2ZpZWxkcy9GdW5jdGlvbkZpZWxkIjsKaW1wb3J0IHsgQm9vbGVhblNldHRpbmcgfSBmcm9tICJAL2VuZ2luZS9mZWF0dXJlcy9zZXR0aW5ncy9Cb29sZWFuU2V0dGluZyI7CmV4cG9ydCB2YXIgU2V0dGluZ3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9GZWF0dXJlKSB7CiAgX2luaGVyaXRzKFNldHRpbmdzLCBfRmVhdHVyZSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2V0dGluZ3MpOwoKICBmdW5jdGlvbiBTZXR0aW5ncygpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2V0dGluZ3MpOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgInNldHRpbmdzIik7CiAgICBfdGhpcy5saXN0ID0gW107CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoU2V0dGluZ3MsIFt7CiAgICBrZXk6ICJhZGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChzZXR0aW5nKSB7CiAgICAgIGlmICghdGhpcy5nZXRTZXR0aW5nKHNldHRpbmcuaWQpKSB7CiAgICAgICAgdGhpcy5saXN0LnB1c2goc2V0dGluZyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbml0aWFsaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplKCkgewogICAgICB0aGlzLmFkZChuZXcgQm9vbGVhblNldHRpbmcoU2V0dGluZ0lkLlNob3dTYXZlTWVzc2FnZSwgIlNob3cgc2F2ZSBtZXNzYWdlIiwgdHJ1ZSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInNldFNldHRpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNldHRpbmcoaWQsIHZhbHVlKSB7CiAgICAgIHZhciBzZXR0aW5nID0gdGhpcy5nZXRTZXR0aW5nKGlkKTsKCiAgICAgIGlmIChzZXR0aW5nKSB7CiAgICAgICAgc2V0dGluZy5zZXQodmFsdWUpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUud2FybigiU2V0dGluZyAiLmNvbmNhdChpZCwgIiBkb2VzIG5vdCBleGlzdCIpKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImdldFNldHRpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNldHRpbmcoaWQpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy5saXN0W2ldLmlkID09IGlkKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5saXN0W2ldOwogICAgICAgIH0KICAgICAgfQoKICAgICAgY29uc29sZS53YXJuKCJTZXR0aW5nICIuY29uY2F0KGlkLCAiIGRvZXMgbm90IGV4aXN0IikpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsb2FkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKGRhdGEpIHsKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGEubGlzdCksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfdGhpcyRnZXRTZXR0aW5nOwoKICAgICAgICAgIHZhciBzZXR0aW5nU2F2ZSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgKF90aGlzJGdldFNldHRpbmcgPSB0aGlzLmdldFNldHRpbmcoc2V0dGluZ1NhdmUuaWQpKSA9PT0gbnVsbCB8fCBfdGhpcyRnZXRTZXR0aW5nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRnZXRTZXR0aW5nLnNldChzZXR0aW5nU2F2ZS52YWx1ZSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzYXZlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKCkgewogICAgICByZXR1cm4gewogICAgICAgIGxpc3Q6IHRoaXMubGlzdC5tYXAoZnVuY3Rpb24gKHNldHRpbmcpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGlkOiBzZXR0aW5nLmlkLAogICAgICAgICAgICB2YWx1ZTogc2V0dGluZy52YWx1ZQogICAgICAgICAgfTsKICAgICAgICB9KQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImdldERldmVsb3BlclBhbmVsRmllbGRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXZlbG9wZXJQYW5lbEZpZWxkcygpIHsKICAgICAgcmV0dXJuIFtuZXcgRnVuY3Rpb25GaWVsZChmdW5jdGlvbiAoKSB7CiAgICAgICAgYWxlcnQoJ3Rlc3QnKTsKICAgICAgfSwgJ1Rlc3QnKV07CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2V0dGluZ3M7Cn0oRmVhdHVyZSk7"},{"version":3,"sources":["C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\settings\\Settings.ts"],"names":[],"mappings":";;;;;;AAAA,SAAQ,OAAR,QAAsB,2BAAtB;AAGA,SAAQ,SAAR,QAAwB,sCAAxB;AAEA,SAAQ,aAAR,QAA4B,+CAA5B;AACA,SAAQ,cAAR,QAA6B,2CAA7B;AAEA,WAAa,QAAb;AAAA;;AAAA;;AAGI,sBAAA;AAAA;;AAAA;;AACI,8BAAM,UAAN;AACA,UAAK,IAAL,GAAY,EAAZ;AAFJ;AAGC;;AANL;AAAA;AAAA,WAQI,aAAI,OAAJ,EAAyB;AACrB,UAAI,CAAC,KAAK,UAAL,CAAgB,OAAO,CAAC,EAAxB,CAAL,EAAkC;AAC9B,aAAK,IAAL,CAAU,IAAV,CAAe,OAAf;AACH;AACJ;AAZL;AAAA;AAAA,WAcI,sBAAU;AACN,WAAK,GAAL,CAAS,IAAI,cAAJ,CAAmB,SAAS,CAAC,eAA7B,EAA8C,mBAA9C,EAAmE,IAAnE,CAAT;AACH;AAhBL;AAAA;AAAA,WAkBI,oBAAc,EAAd,EAA6B,KAA7B,EAAqC;AACjC,UAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,EAAhB,CAAhB;;AACA,UAAI,OAAJ,EAAa;AACT,QAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACH,OAFD,MAEO;AACH,QAAA,OAAO,CAAC,IAAR,mBAAwB,EAAxB;AACH;AAEJ;AA1BL;AAAA;AAAA,WA4BI,oBAAc,EAAd,EAA2B;AACvB,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,IAAL,CAAU,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACvC,YAAI,KAAK,IAAL,CAAU,CAAV,EAAa,EAAb,IAAmB,EAAvB,EAA2B;AACvB,iBAAO,KAAK,IAAL,CAAU,CAAV,CAAP;AACH;AACJ;;AACD,MAAA,OAAO,CAAC,IAAR,mBAAwB,EAAxB;AACA,aAAO,IAAP;AACH;AApCL;AAAA;AAAA,WAuCI,cAAK,IAAL,EAA2B;AAAA,iDACG,IAAI,CAAC,IADR;AAAA;;AAAA;AACvB,4DAAqC;AAAA;;AAAA,cAA1B,WAA0B;AACjC,mCAAK,UAAL,CAAgB,WAAW,CAAC,EAA5B,uEAAiC,GAAjC,CAAqC,WAAW,CAAC,KAAjD;AACH;AAHsB;AAAA;AAAA;AAAA;AAAA;AAI1B;AA3CL;AAAA;AAAA,WA6CI,gBAAI;AAEA,aAAO;AACH,QAAA,IAAI,EAAE,KAAK,IAAL,CAAU,GAAV,CAAc,UAAA,OAAO,EAAG;AAC1B,iBAAO;AACH,YAAA,EAAE,EAAE,OAAO,CAAC,EADT;AAEH,YAAA,KAAK,EAAE,OAAO,CAAC;AAFZ,WAAP;AAIH,SALK;AADH,OAAP;AASH;AAxDL;AAAA;AAAA,WA0DI,mCAAuB;AACnB,aAAO,CACH,IAAI,aAAJ,CAAkB,YAAK;AACnB,QAAA,KAAK,CAAC,MAAD,CAAL;AACH,OAFD,EAEG,MAFH,CADG,CAAP;AAKH;AAhEL;;AAAA;AAAA,EAA8B,OAA9B","sourcesContent":["import {Feature} from \"@/engine/features/Feature\";\r\nimport {SettingsSaveData} from \"@/engine/features/settings/SettingsSaveData\";\r\nimport {Setting} from \"@/engine/features/settings/Setting\";\r\nimport {SettingId} from \"@/engine/features/settings/SettingId\";\r\nimport {AbstractField} from \"@/engine/developer-panel/fields/AbstractField\";\r\nimport {FunctionField} from \"@/engine/developer-panel/fields/FunctionField\";\r\nimport {BooleanSetting} from \"@/engine/features/settings/BooleanSetting\";\r\n\r\nexport class Settings extends Feature {\r\n    list: Setting<any>[];\r\n\r\n    constructor() {\r\n        super(\"settings\");\r\n        this.list = [];\r\n    }\r\n\r\n    add(setting: Setting<any>) {\r\n        if (!this.getSetting(setting.id)) {\r\n            this.list.push(setting);\r\n        }\r\n    }\r\n\r\n    initialize() {\r\n        this.add(new BooleanSetting(SettingId.ShowSaveMessage, \"Show save message\", true))\r\n    }\r\n\r\n    setSetting<T>(id: SettingId, value: T) {\r\n        const setting = this.getSetting(id);\r\n        if (setting) {\r\n            setting.set(value);\r\n        } else {\r\n            console.warn(`Setting ${id} does not exist`);\r\n        }\r\n\r\n    }\r\n\r\n    getSetting<T>(id: SettingId): Setting<T> | null {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            if (this.list[i].id == id) {\r\n                return this.list[i];\r\n            }\r\n        }\r\n        console.warn(`Setting ${id} does not exist`);\r\n        return null;\r\n    }\r\n\r\n\r\n    load(data: SettingsSaveData): void {\r\n        for (const settingSave of data.list) {\r\n            this.getSetting(settingSave.id)?.set(settingSave.value);\r\n        }\r\n    }\r\n\r\n    save(): SettingsSaveData {\r\n\r\n        return {\r\n            list: this.list.map(setting => {\r\n                return {\r\n                    id: setting.id,\r\n                    value: setting.value\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    getDeveloperPanelFields(): AbstractField[] {\r\n        return [\r\n            new FunctionField(() => {\r\n                alert('test')\r\n            }, 'Test'),\r\n        ]\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}]}