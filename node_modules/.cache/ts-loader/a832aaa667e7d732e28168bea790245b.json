{"remainingRequest":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js??ref--15-3!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\Feature.ts","dependencies":[{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\Feature.ts","mtime":1655073405511},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655271851080},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1655271851050},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js","mtime":1655271854201},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js","mtime":1655271854628},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js","mtime":1655271851823}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOi9Vc2Vycy9MZWUvRG9jdW1lbnRzL0dpdEh1Yi9pbmNyZW1lbnRhbC1oZWxsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQzovVXNlcnMvTGVlL0RvY3VtZW50cy9HaXRIdWIvaW5jcmVtZW50YWwtaGVsbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiOwoKLyoqDQogKiBBbiBhYnN0cmFjdCBjbGFzcyB0aGF0IGFsbCBmZWF0dXJlcyBzaG91bGQgZXh0ZW5kIGZvci4NCiAqLwpleHBvcnQgdmFyIEZlYXR1cmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIC8qKg0KICAgKiBJbml0aWFsaXplIGFsbCBmZWF0dXJlIGF0dHJpYnV0ZXMuDQogICAqIE5vdGUgdGhhdCB5b3Ugc2hvdWxkIG5vdCBhc3N1bWUgb3RoZXIgZmVhdHVyZXMgZXhpc3QgYWxyZWFkeSBoZXJlDQogICAqIEBwYXJhbSBzYXZlS2V5DQogICAqLwogIGZ1bmN0aW9uIEZlYXR1cmUoc2F2ZUtleSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZlYXR1cmUpOwoKICAgIHRoaXMuc2F2ZUtleSA9IHNhdmVLZXk7CiAgfQogIC8qKg0KICAgKiBDYWxsZWQgaW4gZGV2IG1vZGUsIGRlY2lkZXMgd2hpY2ggZmllbGRzIHRvIHNob3cgaW4gdGhlIGRldmVsb3BlciBwYW5lbC4NCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoRmVhdHVyZSwgW3sKICAgIGtleTogImdldERldmVsb3BlclBhbmVsRmllbGRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXZlbG9wZXJQYW5lbEZpZWxkcygpIHsKICAgICAgcmV0dXJuIFtdOwogICAgfQogICAgLyoqDQogICAgICogQ2FsbGVkIGFmdGVyIGFsbCBmZWF0dXJlcyBhcmUgY3JlYXRlZC4NCiAgICAgKiBDYW4gYmUgdXNlZCB0byBzdWJzY3JpYmUgdG8gb3RoZXIgZmVhdHVyZXMgZXZlbnRzDQogICAgICovCgogIH0sIHsKICAgIGtleTogImluaXRpYWxpemUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemUoZmVhdHVyZXMpIHsvLyBUaGlzIG1ldGhvZCBpbnRlbnRpb25hbGx5IGxlZnQgYmxhbmsKICAgIH0KICAgIC8qKg0KICAgICAqIFJ1bnMgd2hlbiB0aGUgZ2FtZSBnZXRzIHN0YXJ0ZWQuIENhbiBiZSBydW4gbXVsdGlwbGUgdGltZXMgaWYgdGhlIHBsYXllciBjYW4gc3RvcCB0aGUgZ2FtZQ0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7Ly8gVGhpcyBtZXRob2QgaW50ZW50aW9uYWxseSBsZWZ0IGJsYW5rCiAgICB9CiAgICAvKioNCiAgICAgKiBSdW5zIHdoZW4gdGhlIGdhbWUgZ2V0cyBzdG9wcGVkLiBOT1Qgd2hlbiB0aGUgZ2FtZSBjbG9zZXMNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic3RvcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHsvLyBUaGlzIG1ldGhvZCBpbnRlbnRpb25hbGx5IGxlZnQgYmxhbmsKICAgIH0KICAgIC8qKg0KICAgICAqIERlZmF1bHQgZmFsc2UgdG8gYXZvaWQgbm90IGltcGxlbWVudGluZyB0aGUgcHJvcGVyIHJlc3RyaWN0aW9ucw0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjYW5BY2Nlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbkFjY2VzcygpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgLyoqDQogICAgICogT3ZlcnJpZGUgaW4gZmVhdHVyZXMgaWYgc3BlY2lmaWVkDQogICAgICogSU1QT1JUQU5UOiBNYWtlIHN1cmUgdG8gYWx3YXlzIHJldHVybiAxIGFzIHRoZSBkZWZhdWx0DQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFRvdGFsQ3VycmVuY3lNdWx0aXBsaWVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUb3RhbEN1cnJlbmN5TXVsdGlwbGllcih0eXBlKSB7CiAgICAgIHJldHVybiAxOwogICAgfQogICAgLyoqDQogICAgICogR2V0cyBjYWxsZWQgZXZlcnkgR2FtZS5USUNLX0RVUkFUSU9ODQogICAgICogQHBhcmFtIGRlbHRhIHRpbWUgc2luY2UgbGFzdCB1cGRhdGUNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidXBkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZGVsdGEpIHsvLyBPdmVycmlkZSBpbiBzdWJjbGFzcyBpZiBuZWVkZWQKICAgIH0KICB9XSk7CgogIHJldHVybiBGZWF0dXJlOwp9KCk7"},{"version":3,"sources":["C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\Feature.ts"],"names":[],"mappings":";;;AAMA;;AAEG;AACH,WAAsB,OAAtB;EAEI;;;;AAIG;EACH,iBAAsB,OAAtB,EAAqC;IAAA;;IACjC,KAAK,OAAL,GAAe,OAAf;EACH;EAED;;AAEG;;;EAbP;IAAA;IAAA,OAcI,mCAAuB;MACnB,OAAO,EAAP;IACH;IAED;;;AAGG;;EArBP;IAAA;IAAA,OAsBI,oBAAW,QAAX,EAA6B,CACzB;IACH;IAED;;AAEG;;EA5BP;IAAA;IAAA,OA6BI,iBAAK,CACD;IACH;IAED;;AAEG;;EAnCP;IAAA;IAAA,OAoCI,gBAAI,CACA;IACH;IAED;;AAEG;;EA1CP;IAAA;IAAA,OA2CI,qBAAS;MACL,OAAO,KAAP;IACH;IAED;;;AAGG;;EAlDP;IAAA;IAAA,OAmDI,oCAA2B,IAA3B,EAA6C;MACzC,OAAO,CAAP;IACH;IAED;;;AAGG;;EA1DP;IAAA;IAAA,OA2DI,gBAAO,KAAP,EAAoB,CAChB;IACH;EA7DL;;EAAA;AAAA","sourcesContent":["import {Saveable} from \"@/engine/tools/saving/Saveable\";\r\nimport {SaveData} from \"@/engine/tools/saving/SaveData\";\r\nimport {CurrencyType} from \"@/engine/features/wallet/CurrencyType\";\r\nimport {Features} from \"@/engine/Features\";\r\nimport {AbstractField} from \"@/engine/developer-panel/fields/AbstractField\";\r\n\r\n/**\r\n * An abstract class that all features should extend for.\r\n */\r\nexport abstract class Feature implements Saveable {\r\n\r\n    /**\r\n     * Initialize all feature attributes.\r\n     * Note that you should not assume other features exist already here\r\n     * @param saveKey\r\n     */\r\n    protected constructor(saveKey: string) {\r\n        this.saveKey = saveKey;\r\n    }\r\n\r\n    /**\r\n     * Called in dev mode, decides which fields to show in the developer panel.\r\n     */\r\n    getDeveloperPanelFields(): AbstractField[] {\r\n        return []\r\n    }\r\n\r\n    /**\r\n     * Called after all features are created.\r\n     * Can be used to subscribe to other features events\r\n     */\r\n    initialize(features: Features): void {\r\n        // This method intentionally left blank\r\n    }\r\n\r\n    /**\r\n     * Runs when the game gets started. Can be run multiple times if the player can stop the game\r\n     */\r\n    start(): void {\r\n        // This method intentionally left blank\r\n    }\r\n\r\n    /**\r\n     * Runs when the game gets stopped. NOT when the game closes\r\n     */\r\n    stop(): void {\r\n        // This method intentionally left blank\r\n    }\r\n\r\n    /**\r\n     * Default false to avoid not implementing the proper restrictions\r\n     */\r\n    canAccess(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Override in features if specified\r\n     * IMPORTANT: Make sure to always return 1 as the default\r\n     */\r\n    getTotalCurrencyMultiplier(type: CurrencyType) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Gets called every Game.TICK_DURATION\r\n     * @param delta time since last update\r\n     */\r\n    update(delta: number): void {\r\n        // Override in subclass if needed\r\n    }\r\n\r\n    // Saving logic\r\n    saveKey: string;\r\n\r\n    abstract load(data: SaveData): void;\r\n\r\n    abstract save(): SaveData;\r\n\r\n\r\n}\r\n"],"sourceRoot":""}]}