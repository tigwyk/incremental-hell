{"remainingRequest":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\inventory\\Inventory.ts","dependencies":[{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\inventory\\Inventory.ts","mtime":1655089476394},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655271851080},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js","mtime":1655271854201},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js","mtime":1655271854628},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js","mtime":1655271851823}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\inventory\\Inventory.ts"],"names":[],"mappings":"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","sourcesContent":["import {cloneDeep} from 'lodash-es';\r\n\r\nimport {InventorySlot} from \"@/engine/features/inventory/InventorySlot\";\r\nimport {ItemId} from \"@/engine/features/items/ItemId\";\r\nimport {Feature} from \"@/engine/features/Feature\";\r\nimport {ItemList} from \"@/engine/features/items/ItemList\";\r\nimport {Features} from \"@/engine/Features\";\r\nimport {AbstractConsumable} from \"@/engine/features/items/Consumable\";\r\nimport {AbstractItem} from \"@/engine/features/items/AbstractItem\";\r\nimport {EmptyItem} from \"@/engine/features/items/instances/EmptyItem\";\r\nimport {InventorySaveData} from \"@/engine/features/inventory/InventorySaveData\";\r\nimport {InventorySlotSaveData} from \"@/engine/features/inventory/InventorySlotSaveData\";\r\nimport {EventDispatcher} from \"strongly-typed-events\";\r\nimport {ItemAmount} from \"@/engine/features/items/ItemAmount\";\r\n\r\nexport class Inventory extends Feature {\r\n    slotCount: number;\r\n    slots: InventorySlot[];\r\n\r\n    // Overridden in initialize;\r\n    _itemList: ItemList = undefined as unknown as ItemList;\r\n\r\n    private _onItemGain = new EventDispatcher<AbstractItem, number>();\r\n\r\n\r\n    constructor(slots: number = 10) {\r\n        super('inventory');\r\n        this.slotCount = slots;\r\n        this.slots = new Array(this.slotCount).fill(new InventorySlot(new EmptyItem(), 0));\r\n    }\r\n\r\n\r\n    initialize(features: Features) {\r\n        super.initialize(features);\r\n        this._itemList = features.itemList;\r\n    }\r\n\r\n    interactIndices(indexFrom: number, indexTo: number) {\r\n        if (indexFrom === indexTo) {\r\n            return;\r\n        }\r\n\r\n        const itemFrom = this.slots[indexFrom];\r\n\r\n        if (itemFrom.isEmpty()) {\r\n            console.warn(\"Cannot interact with empty item\");\r\n            return;\r\n        }\r\n        const itemTo = this.slots[indexTo];\r\n\r\n        if (itemFrom.item.id === itemTo.item.id) {\r\n            this.mergeItems(itemFrom, itemTo);\r\n            return;\r\n        }\r\n\r\n        this.swapItems(indexFrom, indexTo);\r\n        return;\r\n    }\r\n\r\n    mergeItems(itemFrom: InventorySlot, itemTo: InventorySlot) {\r\n\r\n        if (itemFrom.item.id !== itemTo.item.id) {\r\n            throw new Error(`Cannot merge items of types ${itemFrom.item.id} and ${itemTo.item.id}`);\r\n        }\r\n\r\n        const amount = Math.min(itemFrom.amount, itemTo.spaceLeft());\r\n        itemFrom.loseItems(amount);\r\n        itemTo.gainItems(amount);\r\n    }\r\n\r\n    swapItems(indexFrom: number, indexTo: number) {\r\n        const temp = this.slots[indexFrom];\r\n        this.slots.splice(indexFrom, 1, this.slots[indexTo]);\r\n        this.slots.splice(indexTo, 1, temp);\r\n\r\n    }\r\n\r\n    consumeItem(index: number, amount: number = 1): boolean {\r\n        const inventoryItem = this.slots[index];\r\n        const item = inventoryItem.item;\r\n\r\n\r\n        if (!(item instanceof AbstractConsumable)) {\r\n            console.warn(`Item ${item} is not a consumable`);\r\n            return false;\r\n        }\r\n        if (inventoryItem.amount < amount) {\r\n            console.warn(`Amount of ${inventoryItem} is not greater than ${amount}`);\r\n            return false;\r\n        }\r\n        if (!item.canConsume()) {\r\n            console.warn(\"Cannot consume item, check its restrictions for the reason\");\r\n            return false;\r\n        }\r\n\r\n        if (amount === 1) {\r\n            item.consume();\r\n        } else {\r\n            item.consumeMultiple(amount);\r\n        }\r\n        this.loseItemAtIndex(index, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove items from this inventory, prefer an empty stack\r\n     * Recursively calls itself if stacks are emptying\r\n     * Returns the number of items that still need to be removed\r\n     * @param id\r\n     * @param amount\r\n     */\r\n    loseItemAmount(id: ItemId, amount: number = 1): number {\r\n        // While we still need to remove and have items left\r\n        while (amount > 0 && this.getTotalAmount(id) > 0) {\r\n            const nonFullStackIndex = this.getIndexOfNonFullStack(id)\r\n            const indexToUse = nonFullStackIndex !== -1 ? nonFullStackIndex : this.getIndexOfItem(id);\r\n            if (indexToUse === -1) {\r\n                throw Error(`Index of item ${id} to lose is -1. This suggests an error in inventory management`);\r\n            }\r\n            const amountToRemove = Math.min(amount, this.slots[indexToUse].amount);\r\n            amount -= amountToRemove;\r\n            this.loseItemAtIndex(indexToUse, amountToRemove);\r\n\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    public gainItem(item: AbstractItem, amount: number = 1): number {\r\n        const amountLeft = this._gainItem(item, amount);\r\n        this._onItemGain.dispatch(item, amount);\r\n        return amountLeft;\r\n    }\r\n\r\n    /**\r\n     * Add items to this inventory, prefer an existing stack\r\n     * Recursively calls itself if stacks are overflowing\r\n     * Returns the number of items that need to be added\r\n     */\r\n    private _gainItem(item: AbstractItem, amount: number = 1): number {\r\n\r\n        // Find stack and add to it or create a new one\r\n        const nonFullStackIndex = this.getIndexOfNonFullStack(item.id);\r\n        if (nonFullStackIndex === -1) {\r\n            // Create a new stack\r\n            const emptyIndex = this.getIndexOfFirstEmptySlot();\r\n            if (emptyIndex === -1) {\r\n                console.log(`Cannot add ${amount} of ${item.id}, no empty slots left`);\r\n                return amount;\r\n            }\r\n            const amountToAdd = Math.min(amount, item.maxStack);\r\n            this.slots.splice(emptyIndex, 1, new InventorySlot(item, amountToAdd));\r\n\r\n            const amountLeft = amount - amountToAdd;\r\n            if (amountLeft <= 0) {\r\n                return 0;\r\n            }\r\n            return this._gainItem(item, amountLeft);\r\n        } else {\r\n            // Add to existing stack\r\n            const amountToAdd = Math.min(amount, this.slots[nonFullStackIndex].spaceLeft());\r\n\r\n            this.slots[nonFullStackIndex].gainItems(amountToAdd);\r\n            const amountLeft = amount - amountToAdd;\r\n            if (amountLeft <= 0) {\r\n                return 0;\r\n            }\r\n            return this._gainItem(item, amountLeft);\r\n        }\r\n    }\r\n\r\n    getSpotsLeftForItem(item: AbstractItem) {\r\n        let total = 0;\r\n        for (const inventoryItem of this.slots) {\r\n            if (inventoryItem.isEmpty()) {\r\n                total += item.maxStack;\r\n            } else if (inventoryItem.item.id === item.id) {\r\n                total += inventoryItem.spaceLeft();\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * This method very inefficiently clones the inventory, and simulates adding the items see if they can be taken.\r\n     * It's also the only reason we're using lodash...\r\n     * TODO do this in a smart way.\r\n     */\r\n    canTakeItemAmounts(itemAmounts: ItemAmount[]) {\r\n        const clonedInventory = cloneDeep(this);\r\n        for (const item of itemAmounts) {\r\n            const amountLeft = clonedInventory.gainItem(this._itemList[item.id], item.amount);\r\n            if (amountLeft !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    hasItemAmounts(amounts: ItemAmount[]) {\r\n        for (const amount of amounts) {\r\n            if (!this.hasItemAmount(amount)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    hasItemAmount(amount: ItemAmount) {\r\n        return this.getTotalAmount(amount.id) >= amount.amount;\r\n    }\r\n\r\n    canTakeItem(item: AbstractItem, amount: number) {\r\n        return this.getSpotsLeftForItem(item) >= amount;\r\n    }\r\n\r\n    getIndexOfNonFullStack(id: ItemId) {\r\n        for (let i = 0; i < this.slots.length; i++) {\r\n            if (this.slots[i].item.id === id && !this.slots[i].isFull()) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getIndexOfItem(id: ItemId) {\r\n        for (let i = 0; i < this.slots.length; i++) {\r\n            if (this.slots[i].item.id === id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getIndexOfFirstEmptySlot(): number {\r\n        for (let i = 0; i < this.slots.length; i++) {\r\n            if (this.slots[i].isEmpty()) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    hasEmptySlot(): boolean {\r\n        return this.getIndexOfFirstEmptySlot() !== -1;\r\n    }\r\n\r\n    hasNonFullStack(id: ItemId): boolean {\r\n        return this.getIndexOfNonFullStack(id) !== -1;\r\n    }\r\n\r\n\r\n    loseItemAtIndex(index: number, amount: number = 1) {\r\n        this.slots[index].loseItems(amount);\r\n        if (this.slots[index].amount <= 0) {\r\n            this.slots.splice(index, 1, new InventorySlot(new EmptyItem(), 0));\r\n        }\r\n    }\r\n\r\n    dropStack(index: number) {\r\n        this.loseItemAtIndex(index, this.slots[index].amount);\r\n    }\r\n\r\n    getEmptySlotCount(): number {\r\n        let count = 0;\r\n        for (const inventoryItem of this.slots) {\r\n            if (inventoryItem.isEmpty()) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n    getTotalAmount(id: ItemId): number {\r\n        let total = 0;\r\n        for (const inventoryItem of this.slots) {\r\n            if (inventoryItem.item.id === id) {\r\n                total += inventoryItem.amount;\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getAmount(index: number): number {\r\n        return this.slots[index].amount;\r\n    }\r\n\r\n\r\n    isEmpty(): boolean {\r\n        for (const item of this.slots) {\r\n            if (item.amount != 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Emitted whenever this inventory gains items (even if it can't take them).\r\n     */\r\n    public get onItemGain() {\r\n        return this._onItemGain.asEvent();\r\n    }\r\n\r\n    load(data: InventorySaveData): void {\r\n        if (!data.slots) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < data.slots.length; i++) {\r\n            const slotData: InventorySlotSaveData = data.slots[i];\r\n            if (slotData.id === ItemId.Empty) {\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                const item = this._itemList[slotData.id];\r\n                item.load(slotData.data);\r\n                this.slots[i] = new InventorySlot(item, slotData.amount);\r\n            } catch (e) {\r\n                console.error(`Could not load Item ${slotData.id}. Make sure it has a getter in ItemList`);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    save(): InventorySaveData {\r\n        const slots = this.slots.map(slot => {\r\n            return {\r\n                id: slot.item.id,\r\n                amount: slot.amount,\r\n                data: slot.item.save()\r\n            };\r\n        });\r\n        return {\r\n            slots: slots\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}]}