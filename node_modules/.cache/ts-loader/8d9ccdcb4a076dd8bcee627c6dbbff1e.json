{"remainingRequest":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js??ref--15-2!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\wallet\\Wallet.ts","dependencies":[{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\wallet\\Wallet.ts","mtime":1655100109397},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655271851080},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js","mtime":1655271854201},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js","mtime":1655271854628},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js","mtime":1655271851823}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\wallet\\Wallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {Currency} from \"./Currency\";\r\nimport {CurrencyType} from \"./CurrencyType\";\r\n\r\nimport {ISimpleEvent, SimpleEventDispatcher} from \"strongly-typed-events\";\r\nimport {Feature} from \"@/engine/features/Feature\";\r\nimport {WalletSaveData} from \"@/engine/features/wallet/WalletSaveData\";\r\nimport {AbstractField} from \"@/engine/developer-panel/fields/AbstractField\";\r\nimport {NumberField} from \"@/engine/developer-panel/fields/NumberField\";\r\nimport {FunctionField} from \"@/engine/developer-panel/fields/FunctionField\";\r\nimport {RangeField} from \"@/engine/developer-panel/fields/RangeField\";\r\n\r\n\r\nexport class Wallet extends Feature {\r\n    private _currencies: Record<CurrencyType, number> = {} as Record<CurrencyType, number>\r\n    private _multipliers: Record<CurrencyType, number> = {} as Record<CurrencyType, number>\r\n\r\n    private _onCurrencyGain = new SimpleEventDispatcher<Currency>();\r\n\r\n    private readonly _supportedCurrencies: CurrencyType[];\r\n\r\n    constructor(supportedCurrencies: CurrencyType[]) {\r\n        super(\"wallet\");\r\n\r\n        this._supportedCurrencies = supportedCurrencies;\r\n\r\n        // Initialize currencies and multipliers\r\n        for (const type of this._supportedCurrencies) {\r\n            this._currencies[type as CurrencyType] = 0;\r\n            this._multipliers[type as CurrencyType] = 1;\r\n        }\r\n    }\r\n\r\n    public resetTemporaryCurrencies() {\r\n        this._currencies[CurrencyType.Wood] = 0;\r\n        this._currencies[CurrencyType.Grain] = 0;\r\n        this._currencies[CurrencyType.Souls] = 0;\r\n        this._currencies[CurrencyType.Bronze] = 0;\r\n        this._currencies[CurrencyType.Silver] = 0;\r\n        this._currencies[CurrencyType.Gold] = 0;\r\n    }\r\n\r\n    public getAmount(type: CurrencyType): number {\r\n        if (!this.supportsCurrencyType(type)) {\r\n            return 0;\r\n        }\r\n        return this._currencies[type];\r\n    }\r\n\r\n    /**\r\n     * Gain the specified currency and apply the global multiplier\r\n     */\r\n    public gainCurrency(currency: Currency): void {\r\n        currency.multiply(this.getCurrencyMultiplier(currency.type));\r\n\r\n        if (!currency.isValid() || !this.supportsCurrencyType(currency.type)) {\r\n            console.warn(`Could not add currency ${currency.toString()}`);\r\n            return;\r\n        }\r\n\r\n        this._onCurrencyGain.dispatch(currency);\r\n        this._currencies[currency.type] += currency.amount;\r\n    }\r\n\r\n    /**\r\n     * Return true if the currency is valid and the player has the specified amount.\r\n     */\r\n    public hasCurrency(currency: Currency): boolean {\r\n        if (!this.supportsCurrencyType(currency.type)) {\r\n            return false;\r\n        }\r\n        return this._currencies[currency.type] >= currency.amount;\r\n    }\r\n\r\n    /**\r\n     * Return true if all currencies are valid and the player has the specified amount.\r\n     */\r\n    hasCurrencies(costs: Currency[]) {\r\n        for (const cost of costs) {\r\n            if (!this.hasCurrency(cost)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove the currency amount from the specified currency.\r\n     * IMPORTANT: This method does not care if amounts go negative\r\n     * @param currency\r\n     */\r\n    public loseCurrency(currency: Currency): void {\r\n        if (!currency.isValid() || !this.supportsCurrencyType(currency.type)) {\r\n            console.warn(`Could not lose currency ${currency.toString()}`);\r\n            return;\r\n        }\r\n        this._currencies[currency.type] -= currency.amount;\r\n    }\r\n\r\n    public loseAll() {\r\n        this._currencies[CurrencyType.Money] = 0;\r\n        this._currencies[CurrencyType.Scrap] = 0;\r\n        this._currencies[CurrencyType.Salt] = 0;\r\n        this._currencies[CurrencyType.Diamond] = 0;\r\n    }\r\n\r\n    public loseMultipleCurrencies(currencies: Currency[]) {\r\n        for (const currency of currencies) {\r\n            this.loseCurrency(currency);\r\n        }\r\n    }\r\n\r\n    public payMultipleIfPossible(currencies: Currency[]): boolean {\r\n        if (this.hasCurrencies(currencies)) {\r\n            this.loseMultipleCurrencies(currencies);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the specified currency and returns true if the wallet has enough.\r\n     * Otherwise return false and don't subtract anything\r\n     * @param currency\r\n     * @constructor\r\n     */\r\n    public payIfPossible(currency: Currency): boolean {\r\n        if (this.hasCurrency(currency)) {\r\n            this.loseCurrency(currency);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return 1 if the multiplier is not set\r\n     */\r\n    public getCurrencyMultiplier(type: CurrencyType): number {\r\n        return this._multipliers[type] ?? 1;\r\n    }\r\n\r\n    public setCurrencyMultiplier(multiplier: number, type: CurrencyType): void {\r\n        if (multiplier <= 0 || isNaN(multiplier) || !this.supportsCurrencyType(type)) {\r\n            return;\r\n        }\r\n        this._multipliers[type] = multiplier;\r\n    }\r\n\r\n    public supportsCurrencyType(type: CurrencyType): boolean {\r\n        return this._supportedCurrencies.includes(type);\r\n    }\r\n\r\n    public canAccess(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public save(): WalletSaveData {\r\n        return {\r\n            money: this._currencies[CurrencyType.Money],\r\n        }\r\n    }\r\n\r\n    public load(data: WalletSaveData): void {\r\n        this._currencies[CurrencyType.Money] = data.money ?? this._currencies[CurrencyType.Money];\r\n    }\r\n\r\n    /**\r\n     * Emitted whenever a currency is gained\r\n     * @private\r\n     */\r\n    public get onCurrencyGain(): ISimpleEvent<Currency> {\r\n        return this._onCurrencyGain.asEvent();\r\n    }\r\n\r\n    public get money(): number {\r\n        return this._currencies.Money;\r\n    }\r\n\r\n    public set money(value: number) {\r\n        this._currencies.Money = value;\r\n    }\r\n\r\n    public get wood(): number {\r\n        return this._currencies.Wood;\r\n    }\r\n\r\n    public get grain(): number {\r\n        return this._currencies.Grain;\r\n    }\r\n\r\n    public get souls(): number {\r\n        return this._currencies.Souls;\r\n    }\r\n\r\n    public get bronze(): number {\r\n        return this._currencies.Bronze;\r\n    }\r\n\r\n    public get silver(): number {\r\n        return this._currencies.Silver;\r\n    }\r\n\r\n    public get gold(): number {\r\n        return this._currencies.Gold;\r\n    }\r\n\r\n    public get diamond(): number {\r\n        return this._currencies.Diamonds;\r\n    }\r\n\r\n    public get scrap(): number {\r\n        return this._currencies.Scrap;\r\n    }\r\n\r\n    getDeveloperPanelFields(): AbstractField[] {\r\n        return [\r\n            new NumberField('money', 'Money'),\r\n            new FunctionField(() => {\r\n                this.money = 10\r\n            }, 'Set money to 10').setCssClass('btn-blue'),\r\n            new RangeField('money', 0, 100, 2, 'Money Slider'),\r\n        ]\r\n    }\r\n}\r\n"],"sourceRoot":""}]}