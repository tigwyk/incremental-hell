{"remainingRequest":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js??ref--14-3!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\upgrades\\UpgradeList.ts","dependencies":[{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\upgrades\\UpgradeList.ts","mtime":1655182959353},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655271851080},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1655271851050},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js","mtime":1655271854201},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js","mtime":1655271854628},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js","mtime":1655271851823}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkM6L1VzZXJzL0xlZS9Eb2N1bWVudHMvR2l0SHViL2luY3JlbWVudGFsLWhlbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6L1VzZXJzL0xlZS9Eb2N1bWVudHMvR2l0SHViL2luY3JlbWVudGFsLWhlbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOi9Vc2Vycy9MZWUvRG9jdW1lbnRzL0dpdEh1Yi9pbmNyZW1lbnRhbC1oZWxsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCB7IFVwZ3JhZGVMaXN0U2F2ZURhdGEgfSBmcm9tICJAL2VuZ2luZS9mZWF0dXJlcy91cGdyYWRlcy9VcGdyYWRlTGlzdFNhdmVEYXRhIjsKZXhwb3J0IHZhciBVcGdyYWRlTGlzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gVXBncmFkZUxpc3QobGlzdCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVwZ3JhZGVMaXN0KTsKCiAgICB0aGlzLnNhdmVLZXkgPSAidXBncmFkZXMiOwogICAgdGhpcy5saXN0ID0gbGlzdDsKICB9CgogIF9jcmVhdGVDbGFzcyhVcGdyYWRlTGlzdCwgW3sKICAgIGtleTogImFkZFVwZ3JhZGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFVwZ3JhZGUodXBncmFkZSkgewogICAgICB0aGlzLmxpc3QucHVzaCh1cGdyYWRlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRVcGdyYWRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVcGdyYWRlKGtleSkgewogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5saXN0KSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHVwZ3JhZGUgPSBfc3RlcC52YWx1ZTsKCiAgICAgICAgICBpZiAodXBncmFkZS5pZCA9PT0ga2V5KSB7CiAgICAgICAgICAgIHJldHVybiB1cGdyYWRlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CgogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRUb3RhbE11bHRpcGxpZXJGb3JUeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUb3RhbE11bHRpcGxpZXJGb3JUeXBlKHR5cGUpIHsKICAgICAgdmFyIG11bHRpcGxpZXIgPSAxOwoKICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmxpc3QuZmlsdGVyKGZ1bmN0aW9uICh1cGdyYWRlKSB7CiAgICAgICAgcmV0dXJuIHVwZ3JhZGUudHlwZSA9PT0gdHlwZTsKICAgICAgfSkpLAogICAgICAgICAgX3N0ZXAyOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHVwZ3JhZGUgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICBtdWx0aXBsaWVyICo9IHVwZ3JhZGUuZ2V0Qm9udXModXBncmFkZS5sZXZlbCk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG11bHRpcGxpZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAibG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZChkYXRhKSB7CiAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0YS51cGdyYWRlcyksCiAgICAgICAgICBfc3RlcDM7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgdXBncmFkZVNhdmUgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICB2YXIgdXBncmFkZSA9IHRoaXMuZ2V0VXBncmFkZSh1cGdyYWRlU2F2ZS5rZXkpOwoKICAgICAgICAgIGlmICh1cGdyYWRlID09IG51bGwpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCJDb3VsZCBub3QgbG9hZCB1cGdyYWRlICIuY29uY2F0KHVwZ3JhZGVTYXZlLmtleSkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdXBncmFkZS5sb2FkKHVwZ3JhZGVTYXZlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VTYXZlRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VTYXZlRGF0YShqc29uKSB7CiAgICAgIHZhciBkYXRhID0gbmV3IFVwZ3JhZGVMaXN0U2F2ZURhdGEoKTsKICAgICAgdmFyIGxpc3QgPSBqc29uID09PSBudWxsIHx8IGpzb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGpzb24udXBncmFkZXM7CgogICAgICBpZiAobGlzdCA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgIH0KCiAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobGlzdCksCiAgICAgICAgICBfc3RlcDQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIga2V5ID0gX3N0ZXA0LnZhbHVlOwogICAgICAgICAgZGF0YS5hZGRVcGdyYWRlKGtleSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I0LmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CiAgfSwgewogICAga2V5OiAic2F2ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZSgpIHsKICAgICAgdmFyIGRhdGEgPSBuZXcgVXBncmFkZUxpc3RTYXZlRGF0YSgpOwoKICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmxpc3QpLAogICAgICAgICAgX3N0ZXA1OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjUucygpOyAhKF9zdGVwNSA9IF9pdGVyYXRvcjUubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHVwZ3JhZGUgPSBfc3RlcDUudmFsdWU7CiAgICAgICAgICBkYXRhLmFkZFVwZ3JhZGUodXBncmFkZS5zYXZlKCkpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yNS5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBkYXRhOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFVwZ3JhZGVMaXN0Owp9KCk7"},{"version":3,"sources":["C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\upgrades\\UpgradeList.ts"],"names":[],"mappings":";;;;AAEA,SAAQ,mBAAR,QAAkC,gDAAlC;AAIA,WAAa,WAAb;AAII,uBAAY,IAAZ,EAAkC;AAAA;;AAyBlC,SAAA,OAAA,GAAkB,UAAlB;AAxBI,SAAK,IAAL,GAAY,IAAZ;AACH;;AANL;AAAA;AAAA,WAQI,oBAAW,OAAX,EAAkC;AAC9B,WAAK,IAAL,CAAU,IAAV,CAAe,OAAf;AACH;AAVL;AAAA;AAAA,WAYI,oBAAW,GAAX,EAAsB;AAAA,iDACI,KAAK,IADT;AAAA;;AAAA;AAClB,4DAAiC;AAAA,cAAtB,OAAsB;;AAC7B,cAAI,OAAO,CAAC,EAAR,KAAe,GAAnB,EAAwB;AACpB,mBAAO,OAAP;AACH;AACJ;AALiB;AAAA;AAAA;AAAA;AAAA;;AAMlB,aAAO,IAAP;AACH;AAnBL;AAAA;AAAA,WAqBI,mCAA0B,IAA1B,EAA2C;AACvC,UAAI,UAAU,GAAG,CAAjB;;AADuC,kDAEjB,KAAK,IAAL,CAAU,MAAV,CAAiB,UAAA,OAAO;AAAA,eAAI,OAAO,CAAC,IAAR,KAAiB,IAArB;AAAA,OAAxB,CAFiB;AAAA;;AAAA;AAEvC,+DAA0E;AAAA,cAA/D,OAA+D;AACtE,UAAA,UAAU,IAAI,OAAO,CAAC,QAAR,CAAiB,OAAO,CAAC,KAAzB,CAAd;AACH;AAJsC;AAAA;AAAA;AAAA;AAAA;;AAKvC,aAAO,UAAP;AACH;AA3BL;AAAA;AAAA,WA+BI,cAAK,IAAL,EAAsD;AAAA,kDACxB,IAAI,CAAC,QADmB;AAAA;;AAAA;AAClD,+DAAyC;AAAA,cAA9B,WAA8B;AACrC,cAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,WAAW,CAAC,GAA5B,CAAhB;;AACA,cAAI,OAAO,IAAI,IAAf,EAAqB;AACjB,YAAA,OAAO,CAAC,IAAR,kCAAuC,WAAW,CAAC,GAAnD;AACH,WAFD,MAEO;AACH,YAAA,OAAO,CAAC,IAAR,CAAa,WAAb;AACH;AACJ;AARiD;AAAA;AAAA;AAAA;AAAA;AASrD;AAxCL;AAAA;AAAA,WA0CI,uBAAc,IAAd,EAA2C;AACvC,UAAM,IAAI,GAAG,IAAI,mBAAJ,EAAb;AACA,UAAM,IAAI,GAAG,IAAH,aAAG,IAAH,uBAAG,IAAI,CAAE,QAAnB;;AACA,UAAI,IAAI,IAAI,IAAZ,EAAkB;AACd,eAAO,IAAP;AACH;;AALsC,kDAMrB,IANqB;AAAA;;AAAA;AAMvC,+DAAwB;AAAA,cAAb,GAAa;AACpB,UAAA,IAAI,CAAC,UAAL,CAAgB,GAAhB;AACH;AARsC;AAAA;AAAA;AAAA;AAAA;;AASvC,aAAO,IAAP;AACH;AApDL;AAAA;AAAA,WAsDI,gBAAI;AACA,UAAM,IAAI,GAAG,IAAI,mBAAJ,EAAb;;AADA,kDAEsB,KAAK,IAF3B;AAAA;;AAAA;AAEA,+DAAiC;AAAA,cAAtB,OAAsB;AAC7B,UAAA,IAAI,CAAC,UAAL,CAAgB,OAAO,CAAC,IAAR,EAAhB;AACH;AAJD;AAAA;AAAA;AAAA;AAAA;;AAKA,aAAO,IAAP;AACH;AA5DL;;AAAA;AAAA","sourcesContent":["import {Upgrade} from \"@/engine/features/upgrades/Upgrade\";\r\nimport {Saveable} from \"@/engine/features/saving/Saveable\";\r\nimport {UpgradeListSaveData} from \"@/engine/features/upgrades/UpgradeListSaveData\";\r\nimport {UpgradeSaveData} from \"@/engine/features/upgrades/UpgradeSaveData\";\r\nimport {UpgradeType} from \"@/engine/features/upgrades/UpgradeType\";\r\n\r\nexport class UpgradeList<GenericUpgrade extends Upgrade, GenericUpgradeSaveData extends UpgradeSaveData> implements Saveable {\r\n    list: GenericUpgrade[];\r\n\r\n\r\n    constructor(list: GenericUpgrade[]) {\r\n        this.list = list;\r\n    }\r\n\r\n    addUpgrade(upgrade: GenericUpgrade): void {\r\n        this.list.push(upgrade)\r\n    }\r\n\r\n    getUpgrade(key: string): Upgrade | null {\r\n        for (const upgrade of this.list) {\r\n            if (upgrade.id === key) {\r\n                return upgrade;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getTotalMultiplierForType(type: UpgradeType): number {\r\n        let multiplier = 1;\r\n        for (const upgrade of this.list.filter(upgrade => upgrade.type === type)) {\r\n            multiplier *= upgrade.getBonus(upgrade.level);\r\n        }\r\n        return multiplier;\r\n    }\r\n\r\n    saveKey: string = \"upgrades\";\r\n\r\n    load(data: UpgradeListSaveData<GenericUpgradeSaveData>): void {\r\n        for (const upgradeSave of data.upgrades) {\r\n            const upgrade = this.getUpgrade(upgradeSave.key);\r\n            if (upgrade == null) {\r\n                console.warn(`Could not load upgrade ${upgradeSave.key}`);\r\n            } else {\r\n                upgrade.load(upgradeSave);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseSaveData(json: Record<string, unknown>): UpgradeListSaveData<GenericUpgradeSaveData> {\r\n        const data = new UpgradeListSaveData<GenericUpgradeSaveData>();\r\n        const list = json?.upgrades as GenericUpgradeSaveData[];\r\n        if (list == null) {\r\n            return data;\r\n        }\r\n        for (const key of list) {\r\n            data.addUpgrade(key);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    save(): UpgradeListSaveData<GenericUpgradeSaveData> {\r\n        const data = new UpgradeListSaveData<GenericUpgradeSaveData>();\r\n        for (const upgrade of this.list) {\r\n            data.addUpgrade(upgrade.save() as GenericUpgradeSaveData);\r\n        }\r\n        return data;\r\n    }\r\n\r\n\r\n}\r\n"],"sourceRoot":""}]}