{"remainingRequest":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js??ref--15-3!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\upgrades\\UpgradeList.ts","dependencies":[{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\upgrades\\UpgradeList.ts","mtime":1655182959353},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655271851080},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1655271851050},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\babel-loader\\lib\\index.js","mtime":1655271854201},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\ts-loader\\index.js","mtime":1655271854628},{"path":"C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js","mtime":1655271851823}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkM6L1VzZXJzL0xlZS9Eb2N1bWVudHMvR2l0SHViL2luY3JlbWVudGFsLWhlbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIkM6L1VzZXJzL0xlZS9Eb2N1bWVudHMvR2l0SHViL2luY3JlbWVudGFsLWhlbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJDOi9Vc2Vycy9MZWUvRG9jdW1lbnRzL0dpdEh1Yi9pbmNyZW1lbnRhbC1oZWxsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgeyBVcGdyYWRlTGlzdFNhdmVEYXRhIH0gZnJvbSAiQC9lbmdpbmUvZmVhdHVyZXMvdXBncmFkZXMvVXBncmFkZUxpc3RTYXZlRGF0YSI7CmV4cG9ydCB2YXIgVXBncmFkZUxpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFVwZ3JhZGVMaXN0KGxpc3QpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVcGdyYWRlTGlzdCk7CgogICAgdGhpcy5zYXZlS2V5ID0gInVwZ3JhZGVzIjsKICAgIHRoaXMubGlzdCA9IGxpc3Q7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVXBncmFkZUxpc3QsIFt7CiAgICBrZXk6ICJhZGRVcGdyYWRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRVcGdyYWRlKHVwZ3JhZGUpIHsKICAgICAgdGhpcy5saXN0LnB1c2godXBncmFkZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VXBncmFkZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXBncmFkZShrZXkpIHsKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMubGlzdCksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciB1cGdyYWRlID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgaWYgKHVwZ3JhZGUuaWQgPT09IGtleSkgewogICAgICAgICAgICByZXR1cm4gdXBncmFkZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VG90YWxNdWx0aXBsaWVyRm9yVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG90YWxNdWx0aXBsaWVyRm9yVHlwZSh0eXBlKSB7CiAgICAgIHZhciBtdWx0aXBsaWVyID0gMTsKCiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5saXN0LmZpbHRlcihmdW5jdGlvbiAodXBncmFkZSkgewogICAgICAgIHJldHVybiB1cGdyYWRlLnR5cGUgPT09IHR5cGU7CiAgICAgIH0pKSwKICAgICAgICAgIF9zdGVwMjsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciB1cGdyYWRlID0gX3N0ZXAyLnZhbHVlOwogICAgICAgICAgbXVsdGlwbGllciAqPSB1cGdyYWRlLmdldEJvbnVzKHVwZ3JhZGUubGV2ZWwpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBtdWx0aXBsaWVyOwogICAgfQogIH0sIHsKICAgIGtleTogImxvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoZGF0YSkgewogICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGEudXBncmFkZXMpLAogICAgICAgICAgX3N0ZXAzOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgdmFyIHVwZ3JhZGVTYXZlID0gX3N0ZXAzLnZhbHVlOwogICAgICAgICAgdmFyIHVwZ3JhZGUgPSB0aGlzLmdldFVwZ3JhZGUodXBncmFkZVNhdmUua2V5KTsKCiAgICAgICAgICBpZiAodXBncmFkZSA9PSBudWxsKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybigiQ291bGQgbm90IGxvYWQgdXBncmFkZSAiLmNvbmNhdCh1cGdyYWRlU2F2ZS5rZXkpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVwZ3JhZGUubG9hZCh1cGdyYWRlU2F2ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBhcnNlU2F2ZURhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlU2F2ZURhdGEoanNvbikgewogICAgICB2YXIgZGF0YSA9IG5ldyBVcGdyYWRlTGlzdFNhdmVEYXRhKCk7CiAgICAgIHZhciBsaXN0ID0ganNvbiA9PT0gbnVsbCB8fCBqc29uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBqc29uLnVwZ3JhZGVzOwoKICAgICAgaWYgKGxpc3QgPT0gbnVsbCkgewogICAgICAgIHJldHVybiBkYXRhOwogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGxpc3QpLAogICAgICAgICAgX3N0ZXA0OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGtleSA9IF9zdGVwNC52YWx1ZTsKICAgICAgICAgIGRhdGEuYWRkVXBncmFkZShrZXkpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yNC5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBkYXRhOwogICAgfQogIH0sIHsKICAgIGtleTogInNhdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmUoKSB7CiAgICAgIHZhciBkYXRhID0gbmV3IFVwZ3JhZGVMaXN0U2F2ZURhdGEoKTsKCiAgICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5saXN0KSwKICAgICAgICAgIF9zdGVwNTsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciB1cGdyYWRlID0gX3N0ZXA1LnZhbHVlOwogICAgICAgICAgZGF0YS5hZGRVcGdyYWRlKHVwZ3JhZGUuc2F2ZSgpKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjUuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjUuZigpOwogICAgICB9CgogICAgICByZXR1cm4gZGF0YTsKICAgIH0KICB9XSk7CgogIHJldHVybiBVcGdyYWRlTGlzdDsKfSgpOw=="},{"version":3,"sources":["C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\Lee\\Documents\\GitHub\\incremental-hell\\src\\engine\\features\\upgrades\\UpgradeList.ts"],"names":[],"mappings":";;;;;AAEA,SAAQ,mBAAR,QAAkC,gDAAlC;AAIA,WAAa,WAAb;EAII,qBAAY,IAAZ,EAAkC;IAAA;;IAyBlC,KAAA,OAAA,GAAkB,UAAlB;IAxBI,KAAK,IAAL,GAAY,IAAZ;EACH;;EANL;IAAA;IAAA,OAQI,oBAAW,OAAX,EAAkC;MAC9B,KAAK,IAAL,CAAU,IAAV,CAAe,OAAf;IACH;EAVL;IAAA;IAAA,OAYI,oBAAW,GAAX,EAAsB;MAAA,2CACI,KAAK,IADT;MAAA;;MAAA;QAClB,oDAAiC;UAAA,IAAtB,OAAsB;;UAC7B,IAAI,OAAO,CAAC,EAAR,KAAe,GAAnB,EAAwB;YACpB,OAAO,OAAP;UACH;QACJ;MALiB;QAAA;MAAA;QAAA;MAAA;;MAMlB,OAAO,IAAP;IACH;EAnBL;IAAA;IAAA,OAqBI,mCAA0B,IAA1B,EAA2C;MACvC,IAAI,UAAU,GAAG,CAAjB;;MADuC,4CAEjB,KAAK,IAAL,CAAU,MAAV,CAAiB,UAAA,OAAO;QAAA,OAAI,OAAO,CAAC,IAAR,KAAiB,IAArB;MAAA,CAAxB,CAFiB;MAAA;;MAAA;QAEvC,uDAA0E;UAAA,IAA/D,OAA+D;UACtE,UAAU,IAAI,OAAO,CAAC,QAAR,CAAiB,OAAO,CAAC,KAAzB,CAAd;QACH;MAJsC;QAAA;MAAA;QAAA;MAAA;;MAKvC,OAAO,UAAP;IACH;EA3BL;IAAA;IAAA,OA+BI,cAAK,IAAL,EAAsD;MAAA,4CACxB,IAAI,CAAC,QADmB;MAAA;;MAAA;QAClD,uDAAyC;UAAA,IAA9B,WAA8B;UACrC,IAAM,OAAO,GAAG,KAAK,UAAL,CAAgB,WAAW,CAAC,GAA5B,CAAhB;;UACA,IAAI,OAAO,IAAI,IAAf,EAAqB;YACjB,OAAO,CAAC,IAAR,kCAAuC,WAAW,CAAC,GAAnD;UACH,CAFD,MAEO;YACH,OAAO,CAAC,IAAR,CAAa,WAAb;UACH;QACJ;MARiD;QAAA;MAAA;QAAA;MAAA;IASrD;EAxCL;IAAA;IAAA,OA0CI,uBAAc,IAAd,EAA2C;MACvC,IAAM,IAAI,GAAG,IAAI,mBAAJ,EAAb;MACA,IAAM,IAAI,GAAG,IAAH,aAAG,IAAH,uBAAG,IAAI,CAAE,QAAnB;;MACA,IAAI,IAAI,IAAI,IAAZ,EAAkB;QACd,OAAO,IAAP;MACH;;MALsC,4CAMrB,IANqB;MAAA;;MAAA;QAMvC,uDAAwB;UAAA,IAAb,GAAa;UACpB,IAAI,CAAC,UAAL,CAAgB,GAAhB;QACH;MARsC;QAAA;MAAA;QAAA;MAAA;;MASvC,OAAO,IAAP;IACH;EApDL;IAAA;IAAA,OAsDI,gBAAI;MACA,IAAM,IAAI,GAAG,IAAI,mBAAJ,EAAb;;MADA,4CAEsB,KAAK,IAF3B;MAAA;;MAAA;QAEA,uDAAiC;UAAA,IAAtB,OAAsB;UAC7B,IAAI,CAAC,UAAL,CAAgB,OAAO,CAAC,IAAR,EAAhB;QACH;MAJD;QAAA;MAAA;QAAA;MAAA;;MAKA,OAAO,IAAP;IACH;EA5DL;;EAAA;AAAA","sourcesContent":["import {Upgrade} from \"@/engine/features/upgrades/Upgrade\";\r\nimport {Saveable} from \"@/engine/features/saving/Saveable\";\r\nimport {UpgradeListSaveData} from \"@/engine/features/upgrades/UpgradeListSaveData\";\r\nimport {UpgradeSaveData} from \"@/engine/features/upgrades/UpgradeSaveData\";\r\nimport {UpgradeType} from \"@/engine/features/upgrades/UpgradeType\";\r\n\r\nexport class UpgradeList<GenericUpgrade extends Upgrade, GenericUpgradeSaveData extends UpgradeSaveData> implements Saveable {\r\n    list: GenericUpgrade[];\r\n\r\n\r\n    constructor(list: GenericUpgrade[]) {\r\n        this.list = list;\r\n    }\r\n\r\n    addUpgrade(upgrade: GenericUpgrade): void {\r\n        this.list.push(upgrade)\r\n    }\r\n\r\n    getUpgrade(key: string): Upgrade | null {\r\n        for (const upgrade of this.list) {\r\n            if (upgrade.id === key) {\r\n                return upgrade;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getTotalMultiplierForType(type: UpgradeType): number {\r\n        let multiplier = 1;\r\n        for (const upgrade of this.list.filter(upgrade => upgrade.type === type)) {\r\n            multiplier *= upgrade.getBonus(upgrade.level);\r\n        }\r\n        return multiplier;\r\n    }\r\n\r\n    saveKey: string = \"upgrades\";\r\n\r\n    load(data: UpgradeListSaveData<GenericUpgradeSaveData>): void {\r\n        for (const upgradeSave of data.upgrades) {\r\n            const upgrade = this.getUpgrade(upgradeSave.key);\r\n            if (upgrade == null) {\r\n                console.warn(`Could not load upgrade ${upgradeSave.key}`);\r\n            } else {\r\n                upgrade.load(upgradeSave);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseSaveData(json: Record<string, unknown>): UpgradeListSaveData<GenericUpgradeSaveData> {\r\n        const data = new UpgradeListSaveData<GenericUpgradeSaveData>();\r\n        const list = json?.upgrades as GenericUpgradeSaveData[];\r\n        if (list == null) {\r\n            return data;\r\n        }\r\n        for (const key of list) {\r\n            data.addUpgrade(key);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    save(): UpgradeListSaveData<GenericUpgradeSaveData> {\r\n        const data = new UpgradeListSaveData<GenericUpgradeSaveData>();\r\n        for (const upgrade of this.list) {\r\n            data.addUpgrade(upgrade.save() as GenericUpgradeSaveData);\r\n        }\r\n        return data;\r\n    }\r\n\r\n\r\n}\r\n"],"sourceRoot":""}]}